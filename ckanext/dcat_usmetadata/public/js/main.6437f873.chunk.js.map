{"version":3,"sources":["img/info.svg","components/WrappedField/index.js","components/TagsAutocomplete/index.js","components/HelpText/index.js","components/Radio/index.js","components/RequiredMetadata/index.js","components/RequiredMetadata/defaultValues.js","components/Navigation/index.js","components/MetadataForm/index.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","WrappedField","props","name","label","children","helptext","required","id","disabled","infoText","onClick","rest","choices","type","disabledClass","className","htmlFor","src","info","alt","string","url","select","component","defaultValue","value","map","choice","key","radio","date","TagsAutocomplete","tags","render","arrayHelpers","placeholder","suggestions","allowNew","ref","React","createRef","onAddition","push","onDelete","remove","HelpText","Radio","selected","styleClass","handleRadio","defaultChecked","onChange","defaultProps","RequiredMetadata","values","currentStep","apiUrl","apiKey","useState","rights","setRights","license","setLicense","spatial","setSpatial","temporal","setTemporal","urlDisabled","setUrlDisabled","urlify","text","replace","toLowerCase","helpTextify","baseUrl","helpTexts","title","href","description","style","display","rows","titleField","placeholderText","e","target","rights_desc","spatial_location_desc","publisher","subagency","public_access_level","data_quality","license_others","identifier","spatial_location","temporal_start_date","temporal_end_date","contact_name","contact_email","unique_id","handleSteps","tabIndex","role","onKeyDown","MetadataForm","ownerOrg","setCurrentStep","Navigation","initialValues","defaultRequiredValues","enableReinitialize","validateOnChange","validateOnBlur","handleSubmit","onSubmit","fetchDatasetsOpts","errors","App","Boolean","window","location","hostname","match","root","document","getElementById","getAttribute","ReactDOM","StrictMode","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.6437f873.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/info.5e143234.svg\";","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { Field } from 'formik';\nimport info from '../../img/info.svg';\nimport '../../css/custom.css';\n\nconst WrappedField = (props) => {\n  const {\n    name,\n    label,\n    children,\n    helptext,\n    required,\n    id,\n    disabled,\n    infoText,\n    onClick,\n    ...rest\n  } = props;\n\n  const choices = rest.choices || [];\n  const type = rest.type || 'string';\n\n  let disabledClass = '';\n  if (disabled) {\n    disabledClass = 'disabled';\n  } else {\n    disabledClass = '';\n  }\n\n  return (\n    <div>\n      <label className=\"usa-label\" htmlFor={id}>\n        {label}\n        {label && required && <span>*</span>}\n\n        {/* Tooltip */}\n        {infoText && (\n          <div className=\"tooltip\">\n            {/* eslint-disable */}\n            <img className=\"fa\" src={info} alt=\"info\" />\n            {/* eslint-enable */}\n            <span className=\"tooltiptext\">\n              <span className=\"close\">\n                <span className=\"close-tag\">&times;</span>\n              </span>\n              <h3>{label}</h3>\n              <p>{infoText}</p>\n            </span>\n          </div>\n        )}\n      </label>\n\n      <div className={`usa-helptext ${disabledClass}`}>{helptext}</div>\n      {onClick ? (\n        <button className=\"clear-button\" onClick={onClick} type=\"button\">\n          Remove\n        </button>\n      ) : (\n        ''\n      )}\n      {\n        {\n          string: (\n            <Field\n              className={`usa-input ${disabledClass}`}\n              disabled={disabled}\n              id={id}\n              name={name}\n              {...rest}\n            />\n          ),\n          url: (\n            <Field\n              className={`usa-input ${disabledClass}`}\n              disabled={disabled}\n              id={id}\n              name={name}\n              {...rest}\n            />\n          ),\n          select: (\n            <Field\n              {...rest}\n              id={id}\n              name={name}\n              className={`usa-select ${disabledClass}`}\n              component=\"select\"\n              defaultValue=\"\"\n            >\n              <option value=\"\">-Select-</option>\n              {choices.map((choice) => (\n                <option value={choice} key={choice}>\n                  {choice}\n                </option>\n              ))}\n            </Field>\n          ),\n          radio: (\n            <div>\n              <Field {...rest} id={id} name={name} className=\"usa-radio__input\" component=\"radio\" />\n              <label className=\"usa-radio__label\" htmlFor={id}>\n                {label}\n              </label>\n            </div>\n          ),\n          date: (\n            <div>\n              <input\n                {...rest}\n                id={id}\n                name={name}\n                className={`usa-input ${disabledClass}`}\n                disabled={disabled}\n              />\n            </div>\n          ),\n        }[type]\n      }\n\n      {children}\n    </div>\n  );\n};\n\nWrappedField.propTypes = {\n  name: PropTypes.string.isRequired,\n  type: PropTypes.string.isRequired, // TODO should be array of possible types'\n  required: PropTypes.bool,\n  label: PropTypes.string,\n  id: PropTypes.string,\n  disabled: PropTypes.bool,\n  onClick: PropTypes.func,\n  children: PropTypes.arrayOf(PropTypes.element), // TODO array of els\n  helptext: PropTypes.oneOfType([PropTypes.element, PropTypes.string]), // TODO can be string, HelpText, <p>, etc\n  infoText: PropTypes.oneOfType([PropTypes.element, PropTypes.string]), // TODO can be string, el, etc\n};\n\nexport default WrappedField;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { FieldArray } from 'formik';\nimport ReactTags from 'react-tag-autocomplete';\nimport './index.css';\n\nconst TagsAutocomplete = (props) => {\n  const { tags, name, helptext } = props;\n\n  return (\n    <FieldArray\n      name={name}\n      render={(arrayHelpers) => (\n        <div className=\"react-tags-input grid-col-12\">\n          <div id=\"tags-error\" className=\"error-msg hidden\" type=\"string\" placeholder=\"\" value=\"\">\n            Tags are required\n          </div>\n          {helptext}\n          <ReactTags\n            tags={tags}\n            suggestions={[]}\n            allowNew\n            ref={React.createRef()}\n            onAddition={arrayHelpers.push}\n            onDelete={arrayHelpers.remove}\n            className=\"usa-input\"\n          />\n        </div>\n      )}\n    />\n  );\n};\n\nTagsAutocomplete.propTypes = {\n  tags: PropTypes.any, // eslint-disable-line\n  helptext: PropTypes.any, // eslint-disable-line\n  name: PropTypes.string.isRequired,\n};\n\nexport default TagsAutocomplete;\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nconst HelpText = (props) => {\n  const { children } = props;\n  return <p className=\"usa-helptext\">{children}</p>;\n};\n\nHelpText.propTypes = {\n  children: PropTypes.any, // eslint-disable-line\n};\n\nexport default HelpText;\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nconst Radio = ({ label, selected, value, styleClass, id, name, handleRadio }) => {\n  return (\n    <div className={`form-group ${styleClass}`}>\n      <input\n        type=\"radio\"\n        className=\"usa-radio__input\"\n        value={value}\n        defaultChecked={selected}\n        onChange={handleRadio}\n        name={name}\n        id={id}\n      />\n\n      <label className=\"usa-radio__label\" htmlFor={id}>\n        {label}\n      </label>\n    </div>\n  );\n};\n\nRadio.propTypes = {\n  id: PropTypes.string.isRequired,\n  name: PropTypes.string.isRequired,\n  selected: PropTypes.bool.isRequired,\n  label: PropTypes.string.isRequired,\n  handleRadio: PropTypes.func.isRequired,\n  styleClass: PropTypes.string,\n  value: PropTypes.string,\n};\n\nRadio.defaultProps = {\n  styleClass: '',\n};\n\nexport default Radio;\n","import React, { useState } from 'react';\nimport PropTypes from 'prop-types';\nimport WrappedField from '../WrappedField';\nimport TagsAutocomplete from '../TagsAutocomplete';\nimport HelpText from '../HelpText';\nimport Radio from '../Radio';\n\nconst RequiredMetadata = (props) => {\n  const { values, currentStep, apiUrl, apiKey } = props;\n\n  // RADIO / SELECT Values\n  const [rights, setRights] = useState(values.rights);\n  const [license, setLicense] = useState(values.license);\n  const [spatial, setSpatial] = useState(values.spatial);\n  const [temporal, setTemporal] = useState(values.temporal);\n\n  const [urlDisabled, setUrlDisabled] = useState(true);\n\n  const urlify = (text) => {\n    return text ? text.replace(/\\s+/g, '-').toLowerCase() : '';\n  };\n\n  const helpTextify = (text) => {\n    return <HelpText>{text}</HelpText>;\n  };\n\n  const baseUrl = () => `${apiUrl.replace('api/3/action/', '')}dataset/`;\n\n  if (currentStep !== 1) {\n    // Prop: The current step\n    return null;\n  }\n\n  const helpTexts = {\n    title: (\n      <HelpText>\n        Use <a href=\"https://plainlanguage.gov/\">everyday language</a> to make the dataset easy to\n        find and understand\n      </HelpText>\n    ),\n    description: (\n      <HelpText>\n        Write a description (like an abstract) with enough detail to help a user quickly decide if\n        the asset is of interest. You can use{' '}\n        <a href=\"https://www.markdownguide.org/basic-syntax/\">Markdown Formatting</a> here.\n      </HelpText>\n    ),\n    select: (\n      <HelpText>\n        If you do not see the Publisher for your dataset listed, please contact{' '}\n        <a href=\"mailto:inventory-help@gsa.gov\">inventory-help@gsa.gov</a> for further assistance.\n        Start typing to add tags.\n      </HelpText>\n    ),\n  };\n\n  return (\n    <div className=\"usa-form-custom\">\n      <section id=\"section-basic-mega-menu\" className=\"site-component-section\">\n        <h1 className=\"usite-page-title\" id=\"basic-mega-menu\">\n          Required Metadata\n        </h1>\n        <p className=\"site-text-intro\">\n          The following fields are required metadata for each dataset in an agency’s inventory (\n          <a href=\"https://www.congress.gov/115/plaws/publ435/PLAW-115publ435.pdf\">\n            per Section 202 of the OPEN Government Data Act)\n          </a>{' '}\n          For more information about the form fields, consult the\n          <a href=\"https://resources.data.gov/resources/dcat-us/\">DCAT-US Schema.</a>\n        </p>\n      </section>\n      <div className=\"row\">\n        <div className=\"grid-col-12\">\n          <WrappedField\n            label=\"Title\"\n            name=\"title\"\n            type=\"string\"\n            placeholder=\"\"\n            helptext={helpTexts.title}\n            value={values.title}\n            required\n          />\n\n          <div>\n            <WrappedField\n              name=\"url\"\n              type=\"string\"\n              style={{ display: urlDisabled ? 'none' : 'inline' }}\n              value={values.url || `${baseUrl()}${urlify(values.title)}`}\n            />\n            <span className=\"dataset_url\" style={{ display: urlDisabled ? 'inline' : 'none' }}>\n              {`${baseUrl()}${urlify(values.title)}`}\n            </span>\n\n            <button\n              type=\"button\"\n              className=\"usa-button dataset_url_edit\"\n              style={{ display: urlDisabled ? 'inline' : 'none' }}\n              onClick={() => {\n                setUrlDisabled(false);\n              }}\n            >\n              Edit\n            </button>\n          </div>\n        </div>\n      </div>\n      <div className=\"row\">\n        <WrappedField\n          label=\"Description\"\n          name=\"description\"\n          type=\"string\"\n          component=\"textarea\"\n          rows=\"6\"\n          helptext={helpTexts.description}\n          value={values.description}\n          required\n        />\n      </div>\n      <div className=\"row\">\n        <span className=\"usa-label\">Tags*</span>\n        <TagsAutocomplete\n          id=\"tags-autocomplete-input\"\n          tags={values.tags}\n          apiUrl={apiUrl}\n          apiKey={apiKey}\n          name=\"tags\"\n          titleField=\"name\"\n          required\n          placeholderText=\"Start typing to search\"\n          helptext={helpTextify(\n            'Use both technical and non-technical terms to help users find your dataset.'\n          )}\n        />\n      </div>\n      <div className=\"row\">\n        <WrappedField\n          label=\"Publisher\"\n          name=\"publisher\"\n          type=\"select\"\n          choices={['Publisher 1 ', 'Publisher 2', 'Publisher 3', 'Publisher 4']}\n          required\n          className=\"error-msg\"\n          helptext={helpTexts.select}\n          infoText=\"The publishing entity (e.g. your agency) and optionally their parent organization(s).\"\n        />\n      </div>\n      <div className=\"row\">\n        <WrappedField\n          label=\"Sub Agency\"\n          name=\"subagency\"\n          type=\"select\"\n          choices={['Sub Agency 1 ', 'Sub Agency 2', 'Sub Agency 3', 'Sub-Agency 4']}\n          className=\"error-msg\"\n        />\n      </div>\n      <div className=\"row\">\n        <WrappedField label=\"Contact Name\" name=\"contactPoint\" type=\"string\" required />\n      </div>\n      <div className=\"row\">\n        <WrappedField label=\"Contact Email\" name=\"contactEmail\" type=\"string\" required />\n      </div>\n      <div className=\"row\">\n        <WrappedField label=\"Unique ID\" name=\"identifier\" type=\"string\" required />\n      </div>\n      <div className=\"row\">\n        <WrappedField\n          label=\"Public Access level\"\n          name=\"accessLevel\"\n          type=\"select\"\n          choices={['public', 'restricted public', 'non-public']}\n          className=\"error-msg\"\n          required\n        />\n      </div>\n      <div className=\"row\">\n        <WrappedField\n          label=\"Meets Agency Data Quality\"\n          name=\"dataQuality\"\n          type=\"select\"\n          choices={['Yes', 'No']}\n          className=\"error-msg\"\n          required\n        />\n      </div>\n      <div className=\"row\">\n        <WrappedField\n          label=\"License\"\n          name=\"license\"\n          type=\"select\"\n          choices={['MIT', 'Open Source License', 'Others']}\n          className=\"error-msg\"\n          value={license}\n          onChange={(e) => setLicense(e.target.value)}\n          required\n        />\n        <WrappedField\n          name=\"license_others\"\n          type=\"string\"\n          helptext={helpTextify(\n            `If you selected “Other”, please specify the name of your License*'`\n          )}\n          disabled={license !== 'Others'}\n          required\n        />\n      </div>\n      <div className=\"row\">\n        <Radio\n          label=\"My dataset is public\"\n          name=\"rights\"\n          value={rights}\n          selected={!!rights}\n          handleRadio={() => {\n            setRights(true);\n          }}\n          id=\"rights_option_1\"\n        />\n        <Radio\n          label=\"My dataset is not public\"\n          name=\"rights\"\n          value={rights}\n          selected={!rights}\n          handleRadio={() => {\n            setRights(false);\n          }}\n          id=\"rights_option_2\"\n        />\n        <WrappedField\n          name=\"rights_desc\"\n          type=\"string\"\n          value={values.rights_desc}\n          helptext={helpTextify(\n            'If your dataset is not public, please add an explanation of rights and feel free to include any instructions on restrictions, or how to access a restricted file (max 255 characters)*'\n          )}\n          disabled={!!rights}\n        />\n      </div>\n\n      <div className=\"row\">\n        <span className=\"usa-label\">Relevant Location*</span> <br />\n        <Radio\n          label=\"My dataset does not have a spatial component\"\n          name=\"spatial\"\n          value={spatial}\n          selected={!spatial}\n          handleRadio={() => setSpatial(false)}\n          id=\"spatial_option_1\"\n        />\n        <Radio\n          label=\"My dataset does have a spatial component\"\n          name=\"spatial\"\n          value={spatial}\n          selected={!!spatial}\n          handleRadio={() => setSpatial(true)}\n          id=\"spatial_option_2\"\n        />\n        <WrappedField\n          name=\"spatial_location_desc\"\n          type=\"string\"\n          value={values.spatial_location_desc}\n          helptext={helpTextify(\n            'If your dataset has a spatial component, please provide location such as place name or latitude/longitude pairs above*'\n          )}\n          disabled={!spatial}\n        />\n      </div>\n\n      <div className=\"row\">\n        <span className=\"usa-label\">Temporal*</span> <br />\n        <Radio\n          label=\"My dataset does not have a start and end date for the applicability of data\"\n          name=\"temporal\"\n          value={temporal}\n          selected={!temporal}\n          handleRadio={() => setTemporal(false)}\n          id=\"temporal_option_1\"\n        />\n        <Radio\n          label=\"My dataset has a start and end date for the applicability of data\"\n          name=\"temporal\"\n          value={temporal}\n          selected={!!temporal}\n          handleRadio={() => {\n            setTemporal(true);\n          }}\n          id=\"temporal_option_2\"\n        />\n        <WrappedField\n          name=\"temporal_start_date\"\n          type=\"date\"\n          helptext={helpTextify(\n            'If your dataset has a temporal component, please provide start date for applicability of data above*'\n          )}\n          disabled={!temporal}\n        />\n        <WrappedField\n          name=\"temporal_end_date\"\n          type=\"date\"\n          helptext={helpTextify(\n            'If your dataset has a temporal component, please provide start date for applicability of data above*'\n          )}\n          disabled={!temporal}\n        />\n      </div>\n\n      <div className=\"row\">\n        <button type=\"button\" className=\"usa-button usa-button--outline\">\n          Save as draft\n        </button>\n        <button className=\"usa-button\" type=\"submit\">\n          Save and Continue\n        </button>\n      </div>\n    </div>\n  );\n};\n\nRequiredMetadata.propTypes = {\n  apiUrl: PropTypes.string.isRequired,\n  apiKey: PropTypes.string.isRequired,\n  values: PropTypes.any, // eslint-disable-line\n  currentStep: PropTypes.number,\n};\n\nexport default RequiredMetadata;\n","export default {\n  title: '',\n  description: '',\n  publisher: '',\n  subagency: '',\n  public_access_level: '',\n  data_quality: '',\n  license: '',\n  license_others: '',\n  identifier: '',\n  rights: 'false',\n  rights_desc: '',\n  spatial: 'false',\n  spatial_location: 'false',\n  temporal: 'false',\n  temporal_start_date: '',\n  temporal_end_date: '',\n  contact_name: '',\n  contact_email: '',\n  unique_id: '',\n  url: '',\n};\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nconst HelpText = (props) => {\n  const { currentStep, handleSteps } = props;\n  return (\n    <div className=\"app_navigation\" id=\"app_navigation\">\n      <div\n        tabIndex=\"0\"\n        role=\"button\"\n        className={`navsec ${currentStep === 0 ? 'active' : ''}`}\n        onClick={() => handleSteps(0)}\n        onKeyDown={() => handleSteps(0)}\n        id=\"nav-item-first\"\n      >\n        <span>Required Metadata</span>\n      </div>\n      <div\n        tabIndex=\"0\"\n        role=\"link\"\n        className={`navsec ${currentStep === 1 ? 'active' : ''}`}\n        onKeyDown={() => {\n          handleSteps(1);\n        }}\n        onClick={() => {\n          handleSteps(1);\n        }}\n      >\n        <span>Additional Metadata</span>\n      </div>\n      <div\n        tabIndex=\"0\"\n        role=\"button\"\n        className={`navsec ${currentStep === 2 ? 'active' : ''}`}\n        onKeyDown={() => {\n          handleSteps(2);\n        }}\n        onClick={() => {\n          handleSteps(2);\n        }}\n      >\n        <span>Resource Upload</span>\n      </div>\n    </div>\n  );\n};\n\nHelpText.propTypes = {\n  currentStep: PropTypes.number.isRequired,\n  handleSteps: PropTypes.func.isRequired,\n};\n\nexport default HelpText;\n","import React, { useState } from 'react';\nimport PropTypes from 'prop-types';\nimport { Formik, Form } from 'formik';\nimport RequiredMetadata from '../RequiredMetadata';\nimport defaultRequiredValues from '../RequiredMetadata/defaultValues';\nimport Navigation from '../Navigation';\nimport '../../css/custom.css';\nimport '../../css/uswds.css';\n\nconst MetadataForm = (props) => {\n  const { apiUrl, apiKey, ownerOrg } = props;\n\n  // most of the application state is captured here:\n  const [currentStep, setCurrentStep] = useState(0);\n\n  // render metadata form\n  return (\n    <div className=\"grid-container\">\n      <Navigation currentStep={currentStep} handleSteps={setCurrentStep} />\n      <Formik\n        initialValues={defaultRequiredValues}\n        enableReinitialize=\"true\"\n        validateOnChange={false}\n        validateOnBlur={false}\n      >\n        {({ values, handleSubmit }) => {\n          return (\n            <div>\n              <Form onSubmit={handleSubmit}>\n                {currentStep === 0 && (\n                  <div>\n                    <RequiredMetadata\n                      apiKey={apiKey}\n                      apiUrl={apiUrl}\n                      ownerOrg={ownerOrg}\n                      currentStep={1}\n                      fetchDatasetsOpts=\"false\"\n                      values={values}\n                      errors={{}}\n                    />\n                  </div>\n                )}\n              </Form>\n            </div>\n          );\n        }}\n      </Formik>\n    </div>\n  );\n};\n\nMetadataForm.propTypes = {\n  apiUrl: PropTypes.string.isRequired,\n  apiKey: PropTypes.string.isRequired,\n  ownerOrg: PropTypes.string.isRequired,\n};\n\nexport default MetadataForm;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport MetadataForm from './components/MetadataForm';\n\nconst App = (props) => {\n  const { apiUrl, apiKey, ownerOrg } = props;\n  return (\n    <div className=\"App\">\n      <MetadataForm apiUrl={apiUrl} apiKey={apiKey} ownerOrg={ownerOrg} />\n    </div>\n  );\n};\n\nApp.propTypes = {\n  apiUrl: PropTypes.string.isRequired,\n  apiKey: PropTypes.string.isRequired,\n  ownerOrg: PropTypes.string.isRequired,\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/)\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log('No internet connection found. App is running in offline mode.');\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then((registration) => {\n        registration.unregister();\n      })\n      .catch((error) => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nconst root = document.getElementById('r');\nlet apiUrl;\nlet apiKey;\nlet ownerOrg;\n\nif (root) {\n  apiUrl = root.getAttribute('data-apiUrl');\n  apiKey = root.getAttribute('data-apiKey');\n  ownerOrg = root.getAttribute('data-ownerOrg');\n} else {\n  // In development, add your own values here\n  apiUrl = 'localhost:5000/api/3/action/';\n  apiKey = '123';\n  ownerOrg = '123';\n}\n\nReactDOM.render(\n  <React.StrictMode>\n    <App apiUrl={apiUrl} apiKey={apiKey} ownerOrg={ownerOrg} />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}