version: 2

jobs:
  build_metadata_app:
    docker:
      - image: circleci/node:12
    working_directory: ~/ckanext-dcat_usmetadata
    steps:
      - checkout
      - run:
          name: Install dependencies for e2e tests
          command: yarn
      - run:
          name: Prepare latest build files
          command: CI=false yarn build
      - run:
          name: Lint
          command: yarn lint:js
      - run:
          name: Run unit tests
          command: yarn test:metadata-app
      - persist_to_workspace:
          root: ~/
          paths:
            - "ckanext-dcat_usmetadata"
            - ".cache"

  lint_python_code:
    working_directory: ~/ckanext-dcat_usmetadata
    machine:
          image: circleci/classic:latest
    steps:
      - attach_workspace:
          at: ~/
      - run:
          name: Setup nvm
          command: |
            echo 'export NVM_DIR="/opt/circleci/.nvm"' >> $BASH_ENV
            echo ' [ -s "$NVM_DIR/nvm.sh" ] && \. "$NVM_DIR/nvm.sh"' >> $BASH_ENV
      - run:
          name: Setup node version 12 and yarn
          command: |
            nvm install 12
            nvm alias default 12
            nvm use 12
            npm i -g yarn
      - run:
          name: Lint
          command: yarn lint:python

  test_local_docker:
    working_directory: ~/ckanext-dcat_usmetadata
    machine:
          image: circleci/classic:latest
    steps:
      - attach_workspace:
          at: ~/
      - run:
          name: Workaround for Cypress dependencies
          command: |
            sudo apt-get update
            sudo apt-get install -y libgbm-dev
      - run:
          name: Setup nvm
          command: |
            echo 'export NVM_DIR="/opt/circleci/.nvm"' >> $BASH_ENV
            echo ' [ -s "$NVM_DIR/nvm.sh" ] && \. "$NVM_DIR/nvm.sh"' >> $BASH_ENV
      - run:
          name: Setup node version 12 and yarn
          command: |
            nvm install 12
            nvm alias default 12
            nvm use 12
            npm i -g yarn
      - run:
          name: Start CKAN
          command: |
            docker-compose -f docker-compose.yml up -d
      - run:
          name: install dockerize
          command: wget https://github.com/jwilder/dockerize/releases/download/$DOCKERIZE_VERSION/dockerize-linux-amd64-$DOCKERIZE_VERSION.tar.gz && sudo tar -C /usr/local/bin -xzvf dockerize-linux-amd64-$DOCKERIZE_VERSION.tar.gz && rm dockerize-linux-amd64-$DOCKERIZE_VERSION.tar.gz
          environment:
            DOCKERIZE_VERSION: v0.3.0
      - run:
          name: Wait for db
          command: dockerize -wait http://localhost:5000/dataset -timeout 120s
      - run:
          name: Run extension tests
          command: |
            docker-compose run --rm app nosetests --ckan --with-pylons=docker_test.ini ./ckanext/dcat_usmetadata/tests/*
      - run:
          name: Run e2e tests using cypress
          command: |
            yarn e2e
  deploy:
    working_directory: ~/ckanext-dcat_usmetadata
    docker:
      - image: circleci/python:2.7
    steps:
      - attach_workspace:
          at: ~/
      - run:
          name: install wheel
          command: |
            virtualenv venv
            . venv/bin/activate
            pip install -r dev-requirements.txt
      - run:
          name: init .pypirc
          command: |
            echo -e "[pypi]" >> ~/.pypirc
            echo -e "username = __token__" >> ~/.pypirc
            echo -e "password = $PYPI_TOKEN" >> ~/.pypirc
      - run:
          name: create packages
          command: |
            . venv/bin/activate
            python setup.py sdist
            python setup.py bdist_wheel
      - run:
          name: upload to pypi
          command: |
            . venv/bin/activate
            twine upload dist/*


workflows:
  version: 2
  build_and_test:
    jobs:
      - build_metadata_app:
          filters:
            tags:
              only: /[0-9]+(\.[0-9]+)*/
      - lint_python_code:
          requires:
            - build_metadata_app
          filters:
            tags:
              only: /[0-9]+(\.[0-9]+)*/
      - test_local_docker:
          requires:
            - lint_python_code
          filters:
            tags:
              only: /[0-9]+(\.[0-9]+)*/
      - deploy:
          requires:
            - test_local_docker
          filters:
            tags:
              only: /[0-9]+(\.[0-9]+)*/
            branches:
              ignore: /.*/
